#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Arachne, a search engine for files and directories.
# Copyright (C) 2008, 2009 Yasser González Fernández <yglez@uh.cu>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

"""Script that starts the Arachne daemon.
"""

import sys
import logging
import optparse
import ConfigParser

from arachne import __author__, __version__
from arachne.daemon import ArachneDaemon
from arachne.util.time import str_to_secs


def _parse_args():
    """Parse the command line arguments.
    """
    usage = '%prog [options]'
    version = 'arachned (Arachne) %s\nCopyright (C) 2008, 2009 %s.\nYou may ' \
        'redistribute copies of Arachne under the terms of the GNU General\n' \
        'Public License version 3 or later.  For more information about' \
        ' these matters,\nsee the file named LICENSE found in the source' \
        ' distribution.' % (__version__, ' '.join(__author__.split()[:-1]))
    description = 'Daemon of the Arachne file search engine.'
    parser = optparse.OptionParser(usage=usage, version=version,
                                   description=description)
    parser.add_option('-c', '--conf', metavar='FILE', dest='config_file',
                      help='specify config file (default %default)')
    parser.set_defaults(config_file='/etc/arachne/arachned.conf')
    return parser.parse_args()[0].__dict__


def _parse_config_file(configfile):
    """Parse the configuration file.
    """
    config = {
        'num_crawlers': 3,
        'user': None,
        'group': None,
        'sites_file': '/etc/arachne/sites.conf',
        'pid_file': '/var/run/arachne/arachned.pid',
        'spool_dir': '/var/lib/spool/arachne/',
        'database_dir': '/var/lib/arachne/',
        'log_file': '/var/log/arachne/arachned.log',
        'log_level': logging.INFO,
    }
    parser = ConfigParser.ConfigParser()
    try:
        parser.read(configfile)
        for option in config.iterkeys():
            try:
                value = parser.get('arachned', option)
            except ConfigParser.NoOptionError:
                # Ignore missing options, use default values.
                pass
            else:
                # Use the value from the configuration file.
                config[option] = value
    except ConfigParser.NoSectionError:
        _error('failed to read config file or arachned section is missing.')
    except ConfigParser.ParsingError:
        _error('invalid syntax in the config file.')
    except ConfigParser.Error:
        _error('an error has occurred parsing the config file.')
    else:
        try:
            config['num_crawlers'] = int(config['num_crawlers'])
            if config['num_crawlers'] <= 0:
                raise ValueError('Invalid number of crawlers.')
        except ValueError:
            _error('invalid value for num_crawlers in the config file.')
        if config['user'] is not None:
            try:
                config['user'] = int(config['user'])
            except ValueError:
                pass
        if config['group'] is not None:
            try:
                config['group'] = int(config['group'])
            except ValueError:
                pass
        if isinstance(config['log_level'], basestring):
            values = {
                'DEBUG': logging.DEBUG,
                'INFO': logging.INFO,
                'ERROR': logging.ERROR,
            }
            try:
                config['log_level'] = values[config['log_level'].upper()]
            except KeyError:
                _error('invalid value for log_level in the config file.')
        return config


def _parse_sites_file(sites_file):
    """Parse the file with the information of the sites.
    """
    # The format used by this file is based on the configuration file of
    # Planet <http://www.planetplanet.org/>.
    defaults = {
        'request_wait': 30,
        'error_site_wait': 1800,
        'error_dir_wait': 900,
        'min_revisit_wait': 86400,
        'max_revisit_wait': 15552000,
        'default_revisit_wait': 604800,
    }
    ConfigParser.DEFAULTSECT = 'default'
    parser = ConfigParser.ConfigParser(defaults)
    try:
        sites = []
        parser.read(sites_file)
        for section in parser.sections():
            site = {}
            site['url'] = section
            site.update(parser.items(section))
            sites.append(site)
    except ConfigParser.Error:
        _error('an error has occurred parsing the sites file.')
    else:
        if not sites:
            _error('failed to read the sites file or no sites configured.')
        else:
            time_keys = ('request_wait', 'error_site_wait', 'error_dir_wait',
                         'min_revisit_wait', 'max_revisit_wait',
                         'default_revisit_wait')
            for info in sites:
                for key in time_keys:
                    info[key] = str_to_secs(info[key])
                    if info[key] is None:
                        _error('invalid value of "%s" for the site "%s"'
                               % (key, site['url']))
            return sites


def _error(message):
    """Print a message and exit.
    """
    sys.stderr.write('Error: %s\n' % message)
    sys.exit(1)


def main():
    """Start the daemon.
    """
    options = _parse_args()
    config = _parse_config_file(options['config_file'])
    sites = _parse_sites_file(config['sites_file'])
    daemon = ArachneDaemon(sites, config['num_crawlers'], config['spool_dir'],
                           config['database_dir'], config['log_file'],
                           config['log_level'], config['pid_file'],
                           config['user'], config['group'])
    daemon.start()
    sys.exit(0)


if __name__ == '__main__':
    main()
