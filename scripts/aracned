#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2008 Yasser González Fernández <yglez@uh.cu>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import optparse
import ConfigParser

from aracne import __version__, __copyright__
from aracne.controller import Controller


def _parse_args():
    """Parse the command line arguments.
    """
    usage = '%prog [options]'
    version = '%%prog version %s\n%s.\nThis is free software: you are free' \
        ' to change and redistribute it under the\nterms of the GNU GPL' \
        ' version 3 or later <http://www.gnu.org/licenses/gpl.html>.\nThere' \
        ' is NO WARRANTY, to the extent permitted by law.' % \
        (__version__, __copyright__)
    description = 'Daemon of the Aracne networked file search engine.'
    parser = optparse.OptionParser(usage=usage, version=version,
                                   description=description)
    parser.add_option('-f', '--file', metavar='FILE', dest='configfile',
                      help='specify configuration file (default %default)')
    parser.set_defaults(configfile='/etc/aracne/daemon.conf')
    (options, args) = parser.parse_args()
    return options.__dict__


def _parse_configfile(configfile):
    """Parse the configuration file.
    """
    config = {
        'maintainer': '',
        'numcrawlers': 3,
        'user': None,
        'group': None,
        'sitesfile': '/etc/aracne/sites.conf',
        'pidfile': '/var/run/aracne/aracned.pid',
        'spooldir': '/var/lib/spool/aracne/',
        'databasedir': '/var/lib/aracne/',
        'logfile': '/var/log/aracne/aracned.log',
    }
    parser = ConfigParser.ConfigParser()
    try:
        parser.read(configfile)
        for option in config.iterkeys():
            try:
                value = parser.get('daemon', option)
            except ConfigParser.NoOptionError:
                # Ignore missing options, use the default values.
                pass
            else:
                # Use the value from the configuration file.
                config[option] = value
    except ConfigParser.NoSectionError:
        _error('Failed to read configuration file or daemon section missing.')
    except ConfigParser.ParsingError:
        _error('Invalid syntax found in the configuration file.')
    except ConfigParser.Error:
        _error('An error has occurred parsing the configuration file.')
    else:
        config['numcrawlers'] = int(config['numcrawlers'])
        if config['user'] is not None:
            try:
                config['user'] = int(config['user'])
            except ValueError:
                pass
        if config['group'] is not None:
            try:
                config['group'] = int(config['group'])
            except ValueError:
                pass
        return config


def _parse_sitesfile(sitesfile):
    """Parse the file with the settings for the sites.
    """
    # The format used by this file is based on the configuration file of
    # Planet <http://www.planetplanet.org/>.
    defaults = {
        'errorwait': 1800,
        'requestwait': 30,
        'updatewait': 604800,
    }
    ConfigParser.DEFAULTSECT = 'default'
    parser = ConfigParser.ConfigParser(defaults)
    try:
        sites = []
        parser.read(sitesfile)
        for section in parser.sections():
            site = {}
            site['url'] = section
            site.update(parser.items(section))
            sites.append(site)
    except ConfigParser.Error:
        _error('An error has occurred parsing the sites file.')
    else:
        if not sites:
            _error('Failed to read the sites file or no sites configured.')
        else:
            for site in sites:
                site['errorwait'] = int(site['errorwait'])
                site['requestwait'] = int(site['requestwait'])
                site['updatewait'] = int(site['updatewait'])
            return sites


def _error(message):
    """Print `message` and exit.
    """
    sys.stderr.write('Error: %s\n' % message)
    sys.exit(1)


def main():
    """Start the daemon.
    """
    options = _parse_args()
    config = _parse_configfile(options['configfile'])
    sites = _parse_sitesfile(config['sitesfile'])
    controller = Controller(config, sites)
    controller.start()
    sys.exit(0)


if __name__ == '__main__':
    main()
